/*****************************************************************************
 * LEMON v1.01                                                               *
 *                                                                           *
 * This file is part of the LEMON implementation of the SCIDAC LIME format.  *
 *                                                                           *
 * It is based directly upon the original c-lime implementation,             *
 * as maintained by C. deTar for the USQCD Collaboration,                    *
 * and inherits its license model and parts of its original code.            *
 *                                                                           *
 * LEMON is free software: you can redistribute it and/or modify             *
 * it under the terms of the GNU General Public License as published by      *
 * the Free Software Foundation, either version 3 of the License, or         *
 * (at your option) any later version.                                       *
 *                                                                           *
 * LEMON is distributed in the hope that it will be useful,                  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 * GNU General Public License for more details. You should have received     *
 * a copy of the GNU General Public License along with LEMON. If not,        *
 * see <http://www.gnu.org/licenses/>.                                       *
 *                                                                           *
 * LEMON was written for the European Twisted Mass Collaboration.            *
 * For support requests or bug reports, please contact                       *
 *    A. Deuzeman (deuzeman@itp.unibe.ch)                                    *
 *****************************************************************************/

#pragma once

#include "internal_chainDecomposeEtype.static"

static void lemonSetupIOTypes(LemonSetup *setup, MPI_Comm cartesian, MPI_Offset siteSize, int const *latticeDims, int const *mapping)
{
  int ctr = 0;
  MPI_Offset idx = 0;
  int *mpiCoords = (int*)NULL;
  int *mpiDims = (int*)NULL;
  int *period  = (int*)NULL;

  setup->est = 0;
  setup->etype_int = (MPI_Datatype*)malloc(sizeof(MPI_Datatype));
  MPI_Type_dup(MPI_BYTE, setup->etype_int);
 
  /* Set up data types and file view */
  /* Elementary datatype for reading/writing: a single lattice site of the correct size.
     Note that we always assume we obtained this as raw binary data of the correct type,
     because apparently we cannot trust MPI libraries to deal with conversions internally. */
  
  lemonChainDecomposeEtype(setup, &siteSize); /* Fix potential overflow by chaining non-overflowing sizes. */
    
  MPI_Type_contiguous(siteSize, setup->etype_int[setup->est], &setup->etype);
  MPI_Type_commit(&setup->etype);

  /* Gathering of the required MPI data from the cartesian communicator. */
  MPI_Cartdim_get(cartesian, &setup->ndims);

  setup->starts = (int*)calloc(setup->ndims, sizeof(int));
  setup->localDims = (int*)calloc(setup->ndims, sizeof(int));
  setup->mappedDims = (int*)calloc(setup->ndims, sizeof(int));
  setup->localVol = 1;
  setup->totalVol = 1;

  mpiCoords = (int*)calloc(setup->ndims, sizeof(int));
  mpiDims = (int*)calloc(setup->ndims, sizeof(int));
  period  = (int*)calloc(setup->ndims, sizeof(int));

  MPI_Cart_get(cartesian, setup->ndims, mpiDims, period, mpiCoords);

  /* Calculation of local lattice dimensions from the MPI data we obtained. */
  for (idx = 0; idx < setup->ndims; ++idx)
  {
    setup->mappedDims[idx]  = latticeDims[mapping[idx]];
    setup->localDims[idx]   = setup->mappedDims[idx] / mpiDims[mapping[idx]];
    setup->localVol        *= setup->localDims[idx];
    setup->totalVol        *= setup->mappedDims[idx];
    setup->starts[idx]      = setup->localDims[idx] * mpiCoords[mapping[idx]];
  }
  free(period);
  free(mpiDims);
  free(mpiCoords);

  setup->fst = 0;
  setup->ftype_int = (MPI_Datatype*)NULL;
   
  /* Build up a filetype that provides the right offsets for the reading of a N-dimensional lattice. */
  MPI_Type_create_subarray(setup->ndims, setup->mappedDims, setup->localDims, setup->starts,
			   MPI_ORDER_C, setup->etype, &setup->ftype);
  MPI_Type_commit(&setup->ftype);
}